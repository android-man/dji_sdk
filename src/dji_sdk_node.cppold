/*
 ============================================================================
 Name        : dji_sdk_node.c
 Author      : Ying Jiahang, wuyuwei
 Version     :
 Copyright   : Your copyright notice
 Description : Hello World in C, Ansi-style
 ============================================================================
 */
// ROS
#include <ros/ros.h>
#include "std_msgs/Float32.h"
#include "geometry_msgs/Quaternion.h"
// SDK
#include <stdio.h>
#include <stdlib.h>
#include "sdk_comm.h"
#include "DJI_Pro_Hw.h"
#include "DJI_Pro_Link.h"
#include "DJI_Pro_App.h"

// for_example
#include <math.h>

#define C_EARTH (double) 6378137.0
#define C_PI	(double) 3.141592653589793


using namespace ros;

ros::Subscriber cmd_data_sub,nav_open_close_sub, ctrl_mode_sub, ctrl_data_sub, simple_task_sub;

ros::Publisher battery_pub, nav_ctrl_status_pub, flight_status_pub, sensor_data_pub, rc_data_pub, test_fre_pub;

ros::Timer simple_task_timer;

static float ctrl_mode = 1;
static int simple_task_num = -1;
static fmu_api_battery_data battery_msg = {0};
static fmu_api_sensor_data pose_msg = {0};
static rc_channel_data_t rc_msg = {0};

static req_id_t nav_force_close_req_id = {0};

//----------------------------------------------------------
//table of sdk req data handler
//----------------------------------------------------------
int16_t sensor_handler(uint8_t cmd_id,uint8_t* pbuf,uint16_t len,req_id_t req_id);
int16_t battery_handler(uint8_t cmd_id,uint8_t* pbuf,uint16_t len,req_id_t req_id);
int16_t cmd_ack_handler(uint8_t cmd_id,uint8_t* pbuf,uint16_t len,req_id_t req_id);
int16_t open_close_nav_ack_handler(uint8_t cmd_id,uint8_t* pbuf,uint16_t len,req_id_t req_id);
int16_t nav_force_close_handler(uint8_t cmd_id,uint8_t* pbuf,uint16_t len,req_id_t req_id);
int16_t rc_data_handler(uint8_t cmd_id,uint8_t* pbuf,uint16_t len,req_id_t req_id);
int16_t gimbal_data_handler(uint8_t cmd_id,uint8_t* pbuf,uint16_t len,req_id_t req_id);
int16_t sdk_std_msgs_handler(uint8_t cmd_id,uint8_t* pbuf,uint16_t len,req_id_t req_id);

cmd_handler_table_t cmd_handler_tab[]={
	{0x00,sensor_handler				}, /* */
	{0x01,battery_handler				},
	{0x02,cmd_ack_handler				},
	{0x03,open_close_nav_ack_handler		},
	{0x04,nav_force_close_handler			},
	{0x05,rc_data_handler				},
	{0x06,gimbal_data_handler			},

	{0x0a,sdk_std_msgs_handler			},

	{ERR_INDEX,NULL					}
};

set_handler_table_t set_handler_tab[]={
	{0x00,NULL					},
	{0x01,cmd_handler_tab				},
	{ERR_INDEX,NULL					}
};
 
//----------------------------------------------------------
// serial_test
//----------------------------------------------------------
unsigned short Create_ProStream(unsigned char *buf)
{
	SDKHeader *pro_header = (SDKHeader *)buf;

	pro_header->sof = 0xaa;
	pro_header->version = 0;
	pro_header->length = sizeof(SDKHeader);

	pro_header->session_id = 1;
	pro_header->is_ack = 0;
	pro_header->is_enc = 0;
	pro_header->reversed = 0;

	buf[sizeof(SDKHeader)] = 0x77;
	buf[sizeof(SDKHeader) + 1] = 0x88;

	pro_header->length = sizeof(SDKHeader) + 2 + 4;

	sdk_stream_recalc_crc(buf);

	return pro_header->length;
}
//----------------------------------------------------------
// sdk_req_data_callback
//----------------------------------------------------------

int16_t sensor_handler(uint8_t cmd_id,uint8_t* pbuf,uint16_t len,req_id_t req_id)
{
	if(len != sizeof(fmu_api_sensor_data))
		return 0;
	memcpy(&pose_msg,pbuf,sizeof(fmu_api_sensor_data));

	//printf("q %f %f %f %f \n", pose_msg.q0,pose_msg.q1,pose_msg.q2,pose_msg.q3);
	//printf("v %f %f %f  \n", pose_msg.vgx,pose_msg.vgy,pose_msg.vgz);
	//printf("g %f %f %f  \n", pose_msg.agx,pose_msg.agy,pose_msg.agz);
	//printf("p %f %f %f  \n", pose_msg.lati,pose_msg.longti,pose_msg.height);
	std_msgs::Float32 msg;
	msg.data = (float)pose_msg.vgx;
	sensor_data_pub.publish(msg);
	return 1;
}
int16_t battery_handler(uint8_t cmd_id,uint8_t* pbuf,uint16_t len,req_id_t req_id)
{
//	printf("battery_handler\n");
	if(len != sizeof(fmu_api_battery_data))
	{
//		printf("len %d %d\n",len, sizeof(fmu_api_battery_data));
		return 0;
	}
	memcpy(&battery_msg,pbuf,sizeof(battery_msg));
	//printf("Battery %d \n", battery_msg.capacity_percentage);
	std_msgs::Float32 msg;
	msg.data = (float)battery_msg.capacity_percentage;
	battery_pub.publish(msg);
	return 1;
}

int16_t cmd_ack_handler(uint8_t cmd_id,uint8_t* pbuf,uint16_t len,req_id_t req_id)
{
	if(len != sizeof(fmu_api_ack_data))
		return 0;
	fmu_api_ack_data ack_msg;
	memcpy(&ack_msg, pbuf, sizeof(ack_msg));
	printf("ack_command  %d  %d\n",ack_msg.ack_command,ack_msg.ack_result);
	return 1;

}

int16_t open_close_nav_ack_handler(uint8_t cmd_id,uint8_t* pbuf,uint16_t len,req_id_t req_id)
{
	if(len != sizeof(serial_on_off_nav_data_t))
		return 0;
	serial_on_off_nav_data_t msg;
	memcpy(&msg, pbuf, sizeof(msg));
	printf("nav open_close ack  %d  %d\n",msg.req ,msg.ack);
	
	std_msgs::Float32 msg2;
	if(msg.req == 1 && msg.ack == 1)
	{
		msg2.data = 1;
		nav_ctrl_status_pub.publish(msg2);
	}
	else if(msg.req == 0 && msg.ack == 1)
	{
		msg2.data = 0;
		nav_ctrl_status_pub.publish(msg2);
	}
	
	return 1;

}

int16_t nav_force_close_handler(uint8_t cmd_id,uint8_t* pbuf,uint16_t len,req_id_t req_id)
{
	if(len != sizeof(uint8_t))
		return 0;
	uint8_t msg;
	memcpy(&msg, pbuf, sizeof(msg));
	// test session ack
	nav_force_close_req_id.sequence_number = req_id.sequence_number;
	nav_force_close_req_id.session_id      = req_id.session_id;
	nav_force_close_req_id.reserve	       = 1;

	printf("WARNING nav close by app %d !!!!!!!!!!!!!! \n", msg);
	return 1;

}

int16_t rc_data_handler(uint8_t cmd_id,uint8_t* pbuf,uint16_t len,req_id_t req_id)
{
	if(len != sizeof(rc_channel_data_t))
		return 0;
	memcpy(&rc_msg, pbuf, sizeof(rc_msg));

	std_msgs::Float32 msg;
	msg.data = (float)rc_msg.roll;
	
	rc_data_pub.publish(msg);
	//printf("R %d P %d Y %d T %d M %d\n", msg.roll, msg.pitch, msg.yaw, msg.throttle, msg.mode);
	return 1;
}

int16_t gimbal_data_handler(uint8_t cmd_id,uint8_t* pbuf,uint16_t len,req_id_t req_id)
{
	return 1;
}

#define _recv_std_msgs(_flag, _enable, _data, _buf, _datalen) \
	if( (_flag & _enable))\
	{\
		memcpy((uint8_t *)&(_data),(uint8_t *)(_buf)+(_datalen), sizeof(_data));\
		_datalen += sizeof(_data);\
	}

sdk_std_msg_t recv_sdk_std_msgs = {0};
int16_t sdk_std_msgs_handler(uint8_t cmd_id,uint8_t* pbuf,uint16_t len,req_id_t req_id)
{
	uint16_t *msg_enable_flag = (uint16_t *)pbuf;
	uint16_t data_len = MSG_ENABLE_FLAG_LEN;
/*	
	if( (*msg_enable_flag & ENABLE_MSG_TIME))
	{
		uint32_t time;
		//time = (uint32_t *)pbuf[2];
		memcpy((uint8_t *)&time,(uint8_t *)pbuf + 2, sizeof(time));
		//data_len += sizeof(time);
		printf("[DEBUG] time				%d \n", time);

		std_msgs::Float32 msg;
		msg.data = 1;
		test_fre_pub.publish(msg);
		
	}
*/
	_recv_std_msgs( *msg_enable_flag, ENABLE_MSG_TIME	, recv_sdk_std_msgs.time_stamp			, pbuf, data_len);
	_recv_std_msgs( *msg_enable_flag, ENABLE_MSG_Q		, recv_sdk_std_msgs.q				, pbuf, data_len);
	_recv_std_msgs( *msg_enable_flag, ENABLE_MSG_A		, recv_sdk_std_msgs.a				, pbuf, data_len);
	_recv_std_msgs( *msg_enable_flag, ENABLE_MSG_V		, recv_sdk_std_msgs.v				, pbuf, data_len);
	_recv_std_msgs( *msg_enable_flag, ENABLE_MSG_W		, recv_sdk_std_msgs.w				, pbuf, data_len);
	_recv_std_msgs( *msg_enable_flag, ENABLE_MSG_POS	, recv_sdk_std_msgs.pos				, pbuf, data_len);
	_recv_std_msgs( *msg_enable_flag, ENABLE_MSG_MAG	, recv_sdk_std_msgs.mag				, pbuf, data_len);
	_recv_std_msgs( *msg_enable_flag, ENABLE_MSG_RC		, recv_sdk_std_msgs.rc				, pbuf, data_len);
	_recv_std_msgs( *msg_enable_flag, ENABLE_MSG_GIMBAL	, recv_sdk_std_msgs.gimbal			, pbuf, data_len);
	_recv_std_msgs( *msg_enable_flag, ENABLE_MSG_STATUS	, recv_sdk_std_msgs.status			, pbuf, data_len);
	_recv_std_msgs( *msg_enable_flag, ENABLE_MSG_BATTERY	, recv_sdk_std_msgs.battery_remaining_capacity	, pbuf, data_len);

	if( (*msg_enable_flag & ENABLE_MSG_TIME))
	{
		std_msgs::Float32 msg;
		msg.data = 1;
		test_fre_pub.publish(msg);
		
	}

/*	
	printf("[DEBUG] msg_enable_flag 		%04X \n",*msg_enable_flag);
	printf("[DEBUG] len          			%d   \n",len);
	for(int i = 0; i < len; i++)
	{
		printf(" %02X |", pbuf[i]);
	}
	printf("\n");
	printf("[DEBUG] recv_sdk_std_msgs.time          %d   \n",recv_sdk_std_msgs.time_stamp);
	printf("[DEBUG] recv_sdk_std_msgs.status        %d   \n",recv_sdk_std_msgs.status);
	printf("[DEBUG] recv_sdk_std_msgs.battey        %d   \n",recv_sdk_std_msgs.battery_remaining_capacity);
*/
}
//----------------------------------------------------------
// sdk_ack_callback
//----------------------------------------------------------
void sdk_ack_nav_open_close_callback(ProHeader *header)
{
	uint16_t ack_data;
	printf("call %s\n",__func__);
	printf("Recv ACK,sequence_number=%d,session_id=%d,data_len=%d\n", header->sequence_number, header->session_id, header->length - EXC_DATA_SIZE);
	memcpy((uint8_t *)&ack_data,(uint8_t *)&header->magic, (header->length - EXC_DATA_SIZE));

	std_msgs::Float32 msg;
	if( is_sys_error(ack_data))
	{
		printf("[DEBUG] SDK_SYS_ERROR!!! \n");
	}
	else
	{
		msg.data = (float)ack_data;
		nav_ctrl_status_pub.publish(msg);
	}
}

void test_ack_callback(ProHeader *header)
{
	printf("%s:session id=%d,sq_num=%d\n",__func__,
			header->sequence_number,header->sequence_number);
}

//----------------------------------------------------------
// app_example
//----------------------------------------------------------
// mode_test
void basic_test_mode1(bool &is_init)
{
	static int cnt;
	if(!is_init)
	{
		cnt = 0;
		is_init= true;
	}
	else
	{
		api_ctrl_without_sensor_data_t send_data = {0};
        	//printf("basic_test_mode_1 \n");
		if(cnt < 5*50)
		{
			send_data.ctrl_flag = 0x00;
			send_data.roll_or_x = 10;
			send_data.pitch_or_y = 0;//10/180*C_PI;
			send_data.thr_z = 0; //m/s
			send_data.yaw = -90;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else if(cnt < 10*50)
		{
			send_data.ctrl_flag = 0x00;
			send_data.roll_or_x = -10;
			send_data.pitch_or_y = 0;
			send_data.thr_z = 0; //m/s
			send_data.yaw = -90;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else if(cnt < 15*50)
		{
			send_data.ctrl_flag = 0x00;
			send_data.roll_or_x =  0;
			send_data.pitch_or_y = 10;
			send_data.thr_z = 0; //m/s
			send_data.yaw = -90;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else if(cnt < 20*50)
		{
			send_data.ctrl_flag = 0x00;
			send_data.roll_or_x =  0;
			send_data.pitch_or_y = -10;
			send_data.thr_z = 0; //m/s
			send_data.yaw = -90;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else if(cnt < 25*50)
		{
			send_data.ctrl_flag = 0x00;
			send_data.roll_or_x =  0;
			send_data.pitch_or_y = 0;
			send_data.thr_z = 1; //m/s
			send_data.yaw = -90;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else if(cnt < 30*50)
		{
			send_data.ctrl_flag = 0x00;
			send_data.roll_or_x =  0;
			send_data.pitch_or_y = 0;
			send_data.thr_z = -1; //m/s
			send_data.yaw = -90;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else if(cnt < 35*50)
		{
			send_data.ctrl_flag = 0x00;
			send_data.roll_or_x =  0;
			send_data.pitch_or_y = 0;
			send_data.thr_z = 0; //m/s
			send_data.yaw = 90;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else if(cnt < 40*50)
		{
			send_data.ctrl_flag = 0x00;
			send_data.roll_or_x =  0;
			send_data.pitch_or_y = 0;
			send_data.thr_z = 0; //m/s
			send_data.yaw = -90;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else if(cnt < 45*50)
		{
			send_data.ctrl_flag = 0x02;
			send_data.roll_or_x =  10;
			send_data.pitch_or_y = 0;
			send_data.thr_z = 0; //m/s
			send_data.yaw = 0;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else if(cnt < 50*50)
		{
			send_data.ctrl_flag = 0x02;
			send_data.roll_or_x = -10;
			send_data.pitch_or_y = 0;
			send_data.thr_z = 0; //m/s
			send_data.yaw = 0;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else if(cnt < 55*50)
		{
			send_data.ctrl_flag = 0x02;
			send_data.roll_or_x =  0;
			send_data.pitch_or_y = 10;
			send_data.thr_z = 0; //m/s
			send_data.yaw = 0;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else if(cnt < 60*50)
		{
			send_data.ctrl_flag = 0x02;
			send_data.roll_or_x =  0;
			send_data.pitch_or_y = -10;
			send_data.thr_z = 0; //m/s
			send_data.yaw = 0;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else if(cnt < 65*50)
		{
			send_data.ctrl_flag = 0x02;
			send_data.roll_or_x =  0;
			send_data.pitch_or_y = 0;
			send_data.thr_z = 1; //m/s
			send_data.yaw = 0;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else if(cnt < 70*50)
		{
			send_data.ctrl_flag = 0x02;
			send_data.roll_or_x =  0;
			send_data.pitch_or_y = 0;
			send_data.thr_z = -1; //m/s
			send_data.yaw = 0;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else if(cnt < 75*50)
		{
			send_data.ctrl_flag = 0x02;
			send_data.roll_or_x =  0;
			send_data.pitch_or_y = 0;
			send_data.thr_z = 0; //m/s
			send_data.yaw = 90;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else if(cnt < 80*50)
		{
			send_data.ctrl_flag = 0x02;
			send_data.roll_or_x =  0;
			send_data.pitch_or_y = 0;
			send_data.thr_z = 0; //m/s
			send_data.yaw = -90;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else
		{
			cnt = 0;
		}
		App_Send_Data(0,MY_CTRL_CMD_SET,API_CTRL_REQUEST,(uint8_t*)&send_data,sizeof(send_data),NULL, 0,0);

		cnt++;
	}

}

void basic_test_mode2(bool &is_init)
{
	static int cnt;
	if(!is_init)
	{
		cnt = 0;
		is_init= true;
	}
	else
	{
		api_ctrl_without_sensor_data_t send_data = {0};
/*
		// test torsion frame
		if(cnt < 6*50)
		{
			send_data.ctrl_flag = 0x09; // body 
			send_data.roll_or_x = 0;
			send_data.pitch_or_y = -35;//10/180*C_PI;
			send_data.thr_z = 0; //m/s
			send_data.yaw = -200;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else if(cnt < 6*50)
		{
			send_data.ctrl_flag = 0x08; // ground
			send_data.roll_or_x = 0;
			send_data.pitch_or_y = -35;
			send_data.thr_z = 0; //m/s
			send_data.yaw = -200;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
*/
		if(cnt < 5*50)
		{
			send_data.ctrl_flag = 0x08;
			send_data.roll_or_x = 10;
			send_data.pitch_or_y = 0;//10/180*C_PI;
			send_data.thr_z = 0; //m/s
			send_data.yaw = 0;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else if(cnt < 10*50)
		{
			send_data.ctrl_flag = 0x08;
			send_data.roll_or_x = -10;
			send_data.pitch_or_y = 0;
			send_data.thr_z = 0; //m/s
			send_data.yaw = 0;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else if(cnt < 15*50)
		{
			send_data.ctrl_flag = 0x08;
			send_data.roll_or_x =  0;
			send_data.pitch_or_y = 10;
			send_data.thr_z = 0; //m/s
			send_data.yaw = 0;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else if(cnt < 20*50)
		{
			send_data.ctrl_flag = 0x08;
			send_data.roll_or_x =  0;
			send_data.pitch_or_y = -10;
			send_data.thr_z = 0; //m/s
			send_data.yaw = 0;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else if(cnt < 25*50)
		{
			send_data.ctrl_flag = 0x08;
			send_data.roll_or_x =  0;
			send_data.pitch_or_y = 0;
			send_data.thr_z = 1; //m/s
			send_data.yaw = 0;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else if(cnt < 30*50)
		{
			send_data.ctrl_flag = 0x08;
			send_data.roll_or_x =  0;
			send_data.pitch_or_y = 0;
			send_data.thr_z = -1; //m/s
			send_data.yaw = 0;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else if(cnt < 35*50)
		{
			send_data.ctrl_flag = 0x08;
			send_data.roll_or_x =  0;
			send_data.pitch_or_y = 0;
			send_data.thr_z = 0; //m/s
			send_data.yaw = 90;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else if(cnt < 40*50)
		{
			send_data.ctrl_flag = 0x08;
			send_data.roll_or_x =  0;
			send_data.pitch_or_y = 0;
			send_data.thr_z = 0; //m/s
			send_data.yaw = -90;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else if(cnt < 45*50)
		{
			send_data.ctrl_flag = 0x0a;
			send_data.roll_or_x =  10;
			send_data.pitch_or_y = 0;
			send_data.thr_z = 0; //m/s
			send_data.yaw = 0;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else if(cnt < 50*50)
		{
			send_data.ctrl_flag = 0x0a;
			send_data.roll_or_x = -10;
			send_data.pitch_or_y = 0;
			send_data.thr_z = 0; //m/s
			send_data.yaw = 0;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else if(cnt < 55*50)
		{
			send_data.ctrl_flag = 0x0a;
			send_data.roll_or_x =  0;
			send_data.pitch_or_y = 10;
			send_data.thr_z = 0; //m/s
			send_data.yaw = 0;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else if(cnt < 60*50)
		{
			send_data.ctrl_flag = 0x0a;
			send_data.roll_or_x =  0;
			send_data.pitch_or_y = -10;
			send_data.thr_z = 0; //m/s
			send_data.yaw = 0;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else if(cnt < 65*50)
		{
			send_data.ctrl_flag = 0x0a;
			send_data.roll_or_x =  0;
			send_data.pitch_or_y = 0;
			send_data.thr_z = 1; //m/s
			send_data.yaw = 0;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else if(cnt < 70*50)
		{
			send_data.ctrl_flag = 0x0a;
			send_data.roll_or_x =  0;
			send_data.pitch_or_y = 0;
			send_data.thr_z = -1; //m/s
			send_data.yaw = 0;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else if(cnt < 75*50)
		{
			send_data.ctrl_flag = 0x0a;
			send_data.roll_or_x =  0;
			send_data.pitch_or_y = 0;
			send_data.thr_z = 0; //m/s
			send_data.yaw = 90;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else if(cnt < 80*50)
		{
			send_data.ctrl_flag = 0x0a;
			send_data.roll_or_x =  0;
			send_data.pitch_or_y = 0;
			send_data.thr_z = 0; //m/s
			send_data.yaw = -90;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else
		{
			cnt = 0;
		}
		App_Send_Data(0,MY_CTRL_CMD_SET,API_CTRL_REQUEST,(uint8_t*)&send_data,sizeof(send_data),NULL, 0,0);

		cnt++;
	}
}

void basic_test_mode3(bool &is_init)
{
	static int cnt;
	if(!is_init)
	{
		cnt = 0;
		is_init= true;
	}
	else
	{
		api_ctrl_without_sensor_data_t send_data = {0};
/*        	
		// test vel
		if(cnt < 5*50)
		{
			send_data.ctrl_flag = 0x40;
			send_data.roll_or_x = 5;
			send_data.pitch_or_y = 0;//10/180*C_PI;
			send_data.thr_z = 0; //m/s
			send_data.yaw = 0;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else if(cnt < 10*50)
		{
			send_data.ctrl_flag = 0x40;
			send_data.roll_or_x = 0;
			send_data.pitch_or_y = 5;
			send_data.thr_z = 0; //m/s
			send_data.yaw = 0;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else if(cnt < 11*50)
		{
			cnt = 0;
		}
*/

		if(cnt < 5*50)
		{
			send_data.ctrl_flag = 0x40;
			send_data.roll_or_x = 0.5;
			send_data.pitch_or_y = 0;//10/180*C_PI;
			send_data.thr_z = 0; //m/s
			send_data.yaw = -45;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else if(cnt < 10*50)
		{
			send_data.ctrl_flag = 0x40;
			send_data.roll_or_x = -0.5;
			send_data.pitch_or_y = 0;
			send_data.thr_z = 0; //m/s
			send_data.yaw = -45;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else if(cnt < 15*50)
		{
			send_data.ctrl_flag = 0x40;
			send_data.roll_or_x =  0;
			send_data.pitch_or_y = 0.5;
			send_data.thr_z = 0; //m/s
			send_data.yaw = -45;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else if(cnt < 20*50)
		{
			send_data.ctrl_flag = 0x40;
			send_data.roll_or_x =  0;
			send_data.pitch_or_y = -0.5;
			send_data.thr_z = 0; //m/s
			send_data.yaw = -45;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else if(cnt < 25*50)
		{
			send_data.ctrl_flag = 0x40;
			send_data.roll_or_x =  0;
			send_data.pitch_or_y = 0;
			send_data.thr_z = 1; //m/s
			send_data.yaw = -45;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else if(cnt < 30*50)
		{
			send_data.ctrl_flag = 0x40;
			send_data.roll_or_x =  0;
			send_data.pitch_or_y = 0;
			send_data.thr_z = -1; //m/s
			send_data.yaw = -45;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else if(cnt < 35*50)
		{
			send_data.ctrl_flag = 0x40;
			send_data.roll_or_x =  0;
			send_data.pitch_or_y = 0;
			send_data.thr_z = 0; //m/s
			send_data.yaw = 90;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else if(cnt < 40*50)
		{
			send_data.ctrl_flag = 0x40;
			send_data.roll_or_x =  0;
			send_data.pitch_or_y = 0;
			send_data.thr_z = 0; //m/s
			send_data.yaw = -90;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else if(cnt < 45*50)
		{
			send_data.ctrl_flag = 0x42;
			send_data.roll_or_x =  0.5;
			send_data.pitch_or_y = 0;
			send_data.thr_z = 0; //m/s
			send_data.yaw = 0;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else if(cnt < 50*50)
		{
			send_data.ctrl_flag = 0x42;
			send_data.roll_or_x = -0.5;
			send_data.pitch_or_y = 0;
			send_data.thr_z = 0; //m/s
			send_data.yaw = 0;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else if(cnt < 55*50)
		{
			send_data.ctrl_flag = 0x42;
			send_data.roll_or_x =  0;
			send_data.pitch_or_y = 0.5;
			send_data.thr_z = 0; //m/s
			send_data.yaw = 0;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else if(cnt < 60*50)
		{
			send_data.ctrl_flag = 0x42;
			send_data.roll_or_x =  0;
			send_data.pitch_or_y = -0.5;
			send_data.thr_z = 0; //m/s
			send_data.yaw = 0;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else if(cnt < 65*50)
		{
			send_data.ctrl_flag = 0x42;
			send_data.roll_or_x =  0;
			send_data.pitch_or_y = 0;
			send_data.thr_z = 1; //m/s
			send_data.yaw = 0;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else if(cnt < 70*50)
		{
			send_data.ctrl_flag = 0x42;
			send_data.roll_or_x =  0;
			send_data.pitch_or_y = 0;
			send_data.thr_z = -1; //m/s
			send_data.yaw = 0;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else if(cnt < 75*50)
		{
			send_data.ctrl_flag = 0x42;
			send_data.roll_or_x =  0;
			send_data.pitch_or_y = 0;
			send_data.thr_z = 0; //m/s
			send_data.yaw = 90;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else if(cnt < 80*50)
		{
			send_data.ctrl_flag = 0x42;
			send_data.roll_or_x =  0;
			send_data.pitch_or_y = 0;
			send_data.thr_z = 0; //m/s
			send_data.yaw = -90;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else
		{
			cnt = 0;
		}
		App_Send_Data(0,MY_CTRL_CMD_SET,API_CTRL_REQUEST,(uint8_t*)&send_data,sizeof(send_data),NULL, 0,0);

		cnt++;
	}

}

void basic_test_mode4(bool &is_init)
{
	static int cnt;
	if(!is_init)
	{
		cnt = 0;
		is_init= true;
	}
	else
	{
		api_ctrl_without_sensor_data_t send_data = {0};

		if(cnt < 5*50)
		{
			send_data.ctrl_flag = 0x48;
			send_data.roll_or_x = 0.5;
			send_data.pitch_or_y = 0;//10/180*C_PI;
			send_data.thr_z = 0; //m/s
			send_data.yaw = 0;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else if(cnt < 10*50)
		{
			send_data.ctrl_flag = 0x48;
			send_data.roll_or_x = -0.5;
			send_data.pitch_or_y = 0;
			send_data.thr_z = 0; //m/s
			send_data.yaw = 0;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else if(cnt < 15*50)
		{
			send_data.ctrl_flag = 0x48;
			send_data.roll_or_x =  0;
			send_data.pitch_or_y = 0.5;
			send_data.thr_z = 0; //m/s
			send_data.yaw = 0;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else if(cnt < 20*50)
		{
			send_data.ctrl_flag = 0x40;
			send_data.roll_or_x =  0;
			send_data.pitch_or_y = -0.5;
			send_data.thr_z = 0; //m/s
			send_data.yaw = 0;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else if(cnt < 25*50)
		{
			send_data.ctrl_flag = 0x48;
			send_data.roll_or_x =  0;
			send_data.pitch_or_y = 0;
			send_data.thr_z = 1; //m/s
			send_data.yaw = 0;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else if(cnt < 30*50)
		{
			send_data.ctrl_flag = 0x48;
			send_data.roll_or_x =  0;
			send_data.pitch_or_y = 0;
			send_data.thr_z = -1; //m/s
			send_data.yaw = 0;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else if(cnt < 35*50)
		{
			send_data.ctrl_flag = 0x48;
			send_data.roll_or_x =  0;
			send_data.pitch_or_y = 0;
			send_data.thr_z = 0; //m/s
			send_data.yaw = 90;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else if(cnt < 40*50)
		{
			send_data.ctrl_flag = 0x48;
			send_data.roll_or_x =  0;
			send_data.pitch_or_y = 0;
			send_data.thr_z = 0; //m/s
			send_data.yaw = -90;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else if(cnt < 45*50)
		{
			send_data.ctrl_flag = 0x4a;
			send_data.roll_or_x =  0.5;
			send_data.pitch_or_y = 0;
			send_data.thr_z = 0; //m/s
			send_data.yaw = 0;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else if(cnt < 50*50)
		{
			send_data.ctrl_flag = 0x4a;
			send_data.roll_or_x = -0.5;
			send_data.pitch_or_y = 0;
			send_data.thr_z = 0; //m/s
			send_data.yaw = 0;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else if(cnt < 55*50)
		{
			send_data.ctrl_flag = 0x4a;
			send_data.roll_or_x =  0;
			send_data.pitch_or_y = 0.5;
			send_data.thr_z = 0; //m/s
			send_data.yaw = 0;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else if(cnt < 60*50)
		{
			send_data.ctrl_flag = 0x4a;
			send_data.roll_or_x =  0;
			send_data.pitch_or_y = -0.5;
			send_data.thr_z = 0; //m/s
			send_data.yaw = 0;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else if(cnt < 65*50)
		{
			send_data.ctrl_flag = 0x4a;
			send_data.roll_or_x =  0;
			send_data.pitch_or_y = 0;
			send_data.thr_z = 1; //m/s
			send_data.yaw = 0;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else if(cnt < 70*50)
		{
			send_data.ctrl_flag = 0x4a;
			send_data.roll_or_x =  0;
			send_data.pitch_or_y = 0;
			send_data.thr_z = -1; //m/s
			send_data.yaw = 0;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else if(cnt < 75*50)
		{
			send_data.ctrl_flag = 0x4a;
			send_data.roll_or_x =  0;
			send_data.pitch_or_y = 0;
			send_data.thr_z = 0; //m/s
			send_data.yaw = 90;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else if(cnt < 80*50)
		{
			send_data.ctrl_flag = 0x4a;
			send_data.roll_or_x =  0;
			send_data.pitch_or_y = 0;
			send_data.thr_z = 0; //m/s
			send_data.yaw = -90;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else
		{
			cnt = 0;
		}
		App_Send_Data(0,MY_CTRL_CMD_SET,API_CTRL_REQUEST,(uint8_t*)&send_data,sizeof(send_data),NULL, 0,0);
		cnt++;
	}

}

void basic_test_mode5(bool &is_init)
{
	static int cnt;
	static float init_lat;
	static float init_lon;
	if(!is_init)
	{
		cnt = 0;
		init_lat = pose_msg.lati;
		init_lon = pose_msg.longti;
		is_init = true;
    	}
	else
	{
		api_ctrl_without_sensor_data_t send_data = {0};
		
		if(cnt < 5*50)
		{

			float tgt_pos_x = 3; //m
			float tgt_pos_y = 0;

			float tgt_pos_lat = init_lat + tgt_pos_x/C_EARTH;
			float tgt_pos_lon = init_lon + tgt_pos_y/C_EARTH*cos(init_lat);

			float pos_x_offset = (tgt_pos_lat - pose_msg.lati) * C_EARTH;
			float pos_y_offset = (tgt_pos_lon - pose_msg.longti) * C_EARTH * cos(pose_msg.lati);

			float tgt_yaw_angle = atan2(pos_y_offset, pos_x_offset);

			send_data.ctrl_flag = 0x82;
            		send_data.roll_or_x = pos_x_offset;
			send_data.pitch_or_y = pos_y_offset;
			send_data.thr_z = 0; //m/s
			send_data.yaw = -45;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else if(cnt < 10*50)
		{
			float tgt_pos_x = 0; //m
			float tgt_pos_y = 0;

			float tgt_pos_lat = init_lat + tgt_pos_x/C_EARTH;
			float tgt_pos_lon = init_lon + tgt_pos_y/C_EARTH*cos(init_lat);

			float pos_x_offset = (tgt_pos_lat - pose_msg.lati) * C_EARTH;
			float pos_y_offset = (tgt_pos_lon - pose_msg.longti) * C_EARTH * cos(pose_msg.lati);

			float tgt_yaw_angle = atan2(pos_y_offset, pos_x_offset);
			
			send_data.ctrl_flag = 0x82;
            		send_data.roll_or_x = pos_x_offset;
			send_data.pitch_or_y = pos_y_offset;
			send_data.thr_z = 0; //m/s
			send_data.yaw = -45;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else if(cnt < 15*50)
		{

			float tgt_pos_x = 0; //m
			float tgt_pos_y = 3;

			float tgt_pos_lat = init_lat + tgt_pos_x/C_EARTH;
			float tgt_pos_lon = init_lon + tgt_pos_y/C_EARTH*cos(init_lat);

			float pos_x_offset = (tgt_pos_lat - pose_msg.lati) * C_EARTH;
			float pos_y_offset = (tgt_pos_lon - pose_msg.longti) * C_EARTH * cos(pose_msg.lati);

			float tgt_yaw_angle = atan2(pos_y_offset, pos_x_offset);

			send_data.ctrl_flag = 0x82;
            		send_data.roll_or_x = pos_x_offset;
			send_data.pitch_or_y = pos_y_offset;
			send_data.thr_z = 0; //m/s
			send_data.yaw = -45;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else if(cnt < 20*50)
		{
			float tgt_pos_x = 0; //m
			float tgt_pos_y = 0;

			float tgt_pos_lat = init_lat + tgt_pos_x/C_EARTH;
			float tgt_pos_lon = init_lon + tgt_pos_y/C_EARTH*cos(init_lat);

			float pos_x_offset = (tgt_pos_lat - pose_msg.lati) * C_EARTH;
			float pos_y_offset = (tgt_pos_lon - pose_msg.longti) * C_EARTH * cos(pose_msg.lati);

			float tgt_yaw_angle = atan2(pos_y_offset, pos_x_offset);
			
			send_data.ctrl_flag = 0x82;
            		send_data.roll_or_x = pos_x_offset;
			send_data.pitch_or_y = pos_y_offset;
			send_data.thr_z = 0; //m/s
			send_data.yaw = -45;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else if(cnt < 25*50)
		{
			float tgt_pos_x = 0; //m
			float tgt_pos_y = 0;

			float tgt_pos_lat = init_lat + tgt_pos_x/C_EARTH;
			float tgt_pos_lon = init_lon + tgt_pos_y/C_EARTH*cos(init_lat);

			float pos_x_offset = (tgt_pos_lat - pose_msg.lati) * C_EARTH;
			float pos_y_offset = (tgt_pos_lon - pose_msg.longti) * C_EARTH * cos(pose_msg.lati);

			float tgt_yaw_angle = atan2(pos_y_offset, pos_x_offset);
			
			send_data.ctrl_flag = 0x82;
            		send_data.roll_or_x = pos_x_offset;
			send_data.pitch_or_y = pos_y_offset;
			send_data.thr_z = 1; //m/s
			send_data.yaw = 0;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else if(cnt < 30*50)
		{
			float tgt_pos_x = 0; //m
			float tgt_pos_y = 0;

			float tgt_pos_lat = init_lat + tgt_pos_x/C_EARTH;
			float tgt_pos_lon = init_lon + tgt_pos_y/C_EARTH*cos(init_lat);

			float pos_x_offset = (tgt_pos_lat - pose_msg.lati) * C_EARTH;
			float pos_y_offset = (tgt_pos_lon - pose_msg.longti) * C_EARTH * cos(pose_msg.lati);

			float tgt_yaw_angle = atan2(pos_y_offset, pos_x_offset);
			
			send_data.ctrl_flag = 0x82;
            		send_data.roll_or_x = pos_x_offset;
			send_data.pitch_or_y = pos_y_offset;
			send_data.thr_z = -1; //m/s
			send_data.yaw = 180;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else
		{
			cnt = 0;
		}

		App_Send_Data(0,MY_CTRL_CMD_SET,API_CTRL_REQUEST,(uint8_t*)&send_data,sizeof(send_data),NULL, 0,0);

		cnt++;
	}

}

void basic_test_mode6(bool &is_init)
{
	static int cnt;
	static float init_lat;
	static float init_lon;
	if(!is_init)
	{
		cnt = 0;
		init_lat = pose_msg.lati;
		init_lon = pose_msg.longti;
		is_init = true;
    	}
	else
	{
		api_ctrl_without_sensor_data_t send_data = {0};
		
		if(cnt < 5*50)
		{

			float tgt_pos_x = 3; //m
			float tgt_pos_y = 0;

			float tgt_pos_lat = init_lat + tgt_pos_x/C_EARTH;
			float tgt_pos_lon = init_lon + tgt_pos_y/C_EARTH*cos(init_lat);

			float pos_x_offset = (tgt_pos_lat - pose_msg.lati) * C_EARTH;
			float pos_y_offset = (tgt_pos_lon - pose_msg.longti) * C_EARTH * cos(pose_msg.lati);

			float tgt_yaw_angle = atan2(pos_y_offset, pos_x_offset);

			send_data.ctrl_flag = 0x88;
            		send_data.roll_or_x = pos_x_offset;
			send_data.pitch_or_y = pos_y_offset;
			send_data.thr_z = 0; //m/s
			send_data.yaw = -45;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else if(cnt < 10*50)
		{
			float tgt_pos_x = 0; //m
			float tgt_pos_y = 0;

			float tgt_pos_lat = init_lat + tgt_pos_x/C_EARTH;
			float tgt_pos_lon = init_lon + tgt_pos_y/C_EARTH*cos(init_lat);

			float pos_x_offset = (tgt_pos_lat - pose_msg.lati) * C_EARTH;
			float pos_y_offset = (tgt_pos_lon - pose_msg.longti) * C_EARTH * cos(pose_msg.lati);

			float tgt_yaw_angle = atan2(pos_y_offset, pos_x_offset);
			
			send_data.ctrl_flag = 0x88;
            		send_data.roll_or_x = pos_x_offset;
			send_data.pitch_or_y = pos_y_offset;
			send_data.thr_z = 0; //m/s
			send_data.yaw = -45;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else if(cnt < 15*50)
		{

			float tgt_pos_x = 0; //m
			float tgt_pos_y = 3;

			float tgt_pos_lat = init_lat + tgt_pos_x/C_EARTH;
			float tgt_pos_lon = init_lon + tgt_pos_y/C_EARTH*cos(init_lat);

			float pos_x_offset = (tgt_pos_lat - pose_msg.lati) * C_EARTH;
			float pos_y_offset = (tgt_pos_lon - pose_msg.longti) * C_EARTH * cos(pose_msg.lati);

			float tgt_yaw_angle = atan2(pos_y_offset, pos_x_offset);

			send_data.ctrl_flag = 0x88;
            		send_data.roll_or_x = pos_x_offset;
			send_data.pitch_or_y = pos_y_offset;
			send_data.thr_z = 0; //m/s
			send_data.yaw = -45;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else if(cnt < 20*50)
		{
			float tgt_pos_x = 0; //m
			float tgt_pos_y = 0;

			float tgt_pos_lat = init_lat + tgt_pos_x/C_EARTH;
			float tgt_pos_lon = init_lon + tgt_pos_y/C_EARTH*cos(init_lat);

			float pos_x_offset = (tgt_pos_lat - pose_msg.lati) * C_EARTH;
			float pos_y_offset = (tgt_pos_lon - pose_msg.longti) * C_EARTH * cos(pose_msg.lati);

			float tgt_yaw_angle = atan2(pos_y_offset, pos_x_offset);
			
			send_data.ctrl_flag = 0x88;
            		send_data.roll_or_x = pos_x_offset;
			send_data.pitch_or_y = pos_y_offset;
			send_data.thr_z = 0; //m/s
			send_data.yaw = -45;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else if(cnt < 25*50)
		{
			float tgt_pos_x = 0; //m
			float tgt_pos_y = 0;

			float tgt_pos_lat = init_lat + tgt_pos_x/C_EARTH;
			float tgt_pos_lon = init_lon + tgt_pos_y/C_EARTH*cos(init_lat);

			float pos_x_offset = (tgt_pos_lat - pose_msg.lati) * C_EARTH;
			float pos_y_offset = (tgt_pos_lon - pose_msg.longti) * C_EARTH * cos(pose_msg.lati);

			float tgt_yaw_angle = atan2(pos_y_offset, pos_x_offset);
			
			send_data.ctrl_flag = 0x88;
            		send_data.roll_or_x = pos_x_offset;
			send_data.pitch_or_y = pos_y_offset;
			send_data.thr_z = 1; //m/s
			send_data.yaw = 0;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else if(cnt < 30*50)
		{
			float tgt_pos_x = 0; //m
			float tgt_pos_y = 0;

			float tgt_pos_lat = init_lat + tgt_pos_x/C_EARTH;
			float tgt_pos_lon = init_lon + tgt_pos_y/C_EARTH*cos(init_lat);

			float pos_x_offset = (tgt_pos_lat - pose_msg.lati) * C_EARTH;
			float pos_y_offset = (tgt_pos_lon - pose_msg.longti) * C_EARTH * cos(pose_msg.lati);

			float tgt_yaw_angle = atan2(pos_y_offset, pos_x_offset);
			
			send_data.ctrl_flag = 0x88;
            		send_data.roll_or_x = pos_x_offset;
			send_data.pitch_or_y = pos_y_offset;
			send_data.thr_z = -1; //m/s
			send_data.yaw = 180;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else
		{
			cnt = 0;
		}

		App_Send_Data(0,MY_CTRL_CMD_SET,API_CTRL_REQUEST,(uint8_t*)&send_data,sizeof(send_data),NULL, 0,0);

		cnt++;
	}
}

void basic_test_mode13(bool &is_init)
{
	static int cnt;
	if(!is_init)
	{
		cnt = 0;
		is_init= true;
	}
	else
	{
		api_ctrl_without_sensor_data_t send_data = {0};
		if(cnt < 5*50)
		{
			send_data.ctrl_flag = 0x28;
			send_data.roll_or_x = 0;
			send_data.pitch_or_y = 0;
			send_data.thr_z = 50;
			send_data.yaw = -45;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else if(cnt < 10*50)
		{
			send_data.ctrl_flag = 0x28;
			send_data.roll_or_x = 0;
			send_data.pitch_or_y = 0;
			send_data.thr_z = 30; 
			send_data.yaw = 45;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else
		{
			cnt = 0;
		}

		App_Send_Data(0,MY_CTRL_CMD_SET,API_CTRL_REQUEST,(uint8_t*)&send_data,sizeof(send_data),NULL, 0,0);
		cnt++;
	}
}

void basic_test_mode14(bool &is_init)
{
	static int cnt;
	if(!is_init)
	{
		cnt = 0;
		is_init= true;
	}
	else
	{
		api_ctrl_without_sensor_data_t send_data = {0};
		if(cnt < 5*50)
		{
			send_data.ctrl_flag = 0x22;
			send_data.roll_or_x = 0;
			send_data.pitch_or_y = 0;
			send_data.thr_z = 50;
			send_data.yaw = -45;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else if(cnt < 10*50)
		{
			send_data.ctrl_flag = 0x22;
			send_data.roll_or_x = 0;
			send_data.pitch_or_y = 0;
			send_data.thr_z = 30; 
			send_data.yaw = 45;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);
		}
		else
		{
			cnt = 0;
		}

		App_Send_Data(0,MY_CTRL_CMD_SET,API_CTRL_REQUEST,(uint8_t*)&send_data,sizeof(send_data),NULL, 0,0);
		cnt++;
	}
}

static uint8_t test_cmd_send_flag = 1;
static uint8_t test_cmd_is_resend = 0;
void cmd_callback_test_fun(uint16_t *ack)
{
	char result[6][50]={{"REQ_TIME_OUT"},{"REQ_REFUSE"},{"CMD_RECIEVE"},{"STATUS_CMD_EXECUTING"},{"STATUS_CMD_EXE_FAIL"},{"STATUS_CMD_EXE_SUCCESS"}};
	uint16_t recv_ack = *ack;
	printf("[DEBUG] recv_ack %#x \n", recv_ack);
	printf("Cmd result: %s \n", *(result+recv_ack));
	test_cmd_send_flag = 1;
	if(recv_ack != STATUS_CMD_EXE_SUCCESS)
	{
		test_cmd_is_resend = 1;
	}


	// for debug
	if(recv_ack != STATUS_CMD_EXE_SUCCESS)
	{
		test_cmd_send_flag  = 0;
		printf("[ERROR] APP LAYER NOT STATUS_CMD_EXE_SUCCESS !!!!!!!!!!!!!!!!!!\n");
	}	
} 

void basic_test_cmd(bool &is_init)
{
	//printf("test_cmd! \n");
	static int cnt;
	if(!is_init)
	{
		cnt = 0;
		is_init= true;
	}
	else
	{
		if(test_cmd_send_flag)
		{	
			//printf("Cnt %d Resend %d \n",cnt,test_cmd_is_resend);
			uint8_t send_data;
			if(test_cmd_is_resend)
			{
				cnt--;
				test_cmd_is_resend = 0;
			}
			if(cnt % 4 == 0)
			{
				test_cmd_send_flag = 0;
				send_data = 4;
			}
			else if(cnt % 4 == 1)
			{
				test_cmd_send_flag = 0;
				send_data = 6;
			}
			else if(cnt % 4 == 2)
			{
				test_cmd_send_flag = 0;
				send_data = 4;
			}
			else if(cnt % 4 == 3)
			{
				test_cmd_send_flag = 0;
				send_data = 1;
			}
			App_Complex_Send_Cmd(send_data, cmd_callback_test_fun);
			printf("[TEST_CMD] send %d \n",send_data);
			cnt++;
		}
	}
}

void random_test_ack_cmd_callback(ProHeader *header)
{
	/*
	*	#define	REQ_TIME_OUT			0x0000
		#define REQ_REFUSE			0x0001
		#define CMD_RECIEVE			0x0002
		#define STATUS_CMD_EXECUTING		0x0003
		#define STATUS_CMD_EXE_FAIL		0x0004
		#define STATUS_CMD_EXE_SUCCESS		0x0005
	*/
	uint16_t ack_data;
	printf("Sdk_ack_cmd0_callback,sequence_number=%d,session_id=%d,data_len=%d\n", header->sequence_number, header->session_id, header->length - EXC_DATA_SIZE);
	memcpy((uint8_t *)&ack_data,(uint8_t *)&header->magic, (header->length - EXC_DATA_SIZE));

	if( is_sys_error(ack_data))
	{
		printf("[DEBUG] SDK_SYS_ERROR!!! \n");
	}
	else
	{
		char result[6][50]={{"REQ_TIME_OUT"},{"REQ_REFUSE"},{"CMD_RECIEVE"},{"STATUS_CMD_EXECUTING"},{"STATUS_CMD_EXE_FAIL"},{"STATUS_CMD_EXE_SUCCESS"}};
		printf("random_test Cmd result: %s \n", *(result+ack_data));
	}
}

void random_test_cmd(bool &is_init)
{
	cmd_agency_data_t cmd;
	cmd.cmd_data = uint8_t(random()%22);
	cmd.cmd_sequence = uint8_t(random()%5 +1);
	if(int(random()%2) == 0)
	{
		App_Send_Data(2,MY_CTRL_CMD_SET, API_CMD_REQUEST,(uint8_t*)&cmd,sizeof(cmd),random_test_ack_cmd_callback, 500, 10);
	}
	else
	{
		uint8_t req_status = cmd.cmd_sequence;
		App_Send_Data(2,MY_CTRL_CMD_SET, API_CMD_STATUS_REQUEST,(uint8_t*)&req_status,sizeof(req_status),random_test_ack_cmd_callback, 500, 10);
	}
}

void random_test_ctrl_mode(bool &is_init)
{
	static int cnt;
	if(!is_init)
	{
		cnt = 0;
		is_init= true;
	}
	else
	{
		if(cnt < 2 * 50)
		{
			api_ctrl_without_sensor_data_t send_data = {0};
			send_data.ctrl_flag = uint8_t(random()%256);
			send_data.roll_or_x = float(random()%366);
			send_data.pitch_or_y = float(random()%366);
			send_data.thr_z = float(random()%366); //m/s
			send_data.yaw = float(random()%181);;
			printf("f %#x r_x %4.1f p_y %4.1f t_z %4.1f yaw %4.1f \n",
				send_data.ctrl_flag,
				send_data.roll_or_x,
				send_data.pitch_or_y,
				send_data.thr_z,
				send_data.yaw);

			App_Send_Data(0,MY_CTRL_CMD_SET,API_CTRL_REQUEST,(uint8_t*)&send_data,sizeof(send_data),NULL, 0,0);	
		}
		else
		{
			cnt = 0;
		}
	}
}


void get_ctrl_test_mode1_and_mode2(bool &is_init)
{
	static int cnt;
	if(!is_init)
	{
		cnt = 0;
		is_init= true;
	}
	else
	{
		api_ctrl_without_sensor_data_t send_data = {0};
		//send_data.ctrl_flag = 0x90 ;
		//send_data.ctrl_flag = 0x00;
        	send_data.ctrl_flag = 0x0a;
		if(cnt < 10*50)
		{
			send_data.roll_or_x = 10;
			send_data.pitch_or_y = 0;//10/180*C_PI;
			//send_data.thr_z = 2; //m
			send_data.thr_z = 0; //m/s
			send_data.yaw = 0;
			printf("1");
		}
		else if(cnt < 20*50)
		{
			send_data.roll_or_x = 0;
			send_data.pitch_or_y = 0;
            //send_data.thr_z = 10; //m
			send_data.thr_z = 0; //m/s
			send_data.yaw = 0;
			printf("2");
		}
		else
		{
			cnt = 0;
		}
		printf("r p y v %f %f %f %f \n" ,send_data.roll_or_x,send_data.pitch_or_y,send_data.yaw,send_data.thr_z);

		App_Send_Data(0,MY_CTRL_CMD_SET,API_CTRL_REQUEST,(uint8_t*)&send_data,sizeof(send_data),NULL, 0,0);

		cnt++;
	}
}

void get_ctrl_test_mode3_and_mode4(bool &is_init)
{
	static int cnt;
	if(!is_init)
	{
		cnt = 0;
		is_init = true;


	}
	else
	{
		api_ctrl_without_sensor_data_t send_data = {0};
		send_data.ctrl_flag = 0x40; // mode 4 or mode 3
		if(cnt < 10*50)
		{
            		send_data.roll_or_x = 0;
			send_data.pitch_or_y = -1;
			//send_data.thr_z = 2; //m
			send_data.thr_z = 0; //m/s
			send_data.yaw = 0;
			printf("1");
		}
		else if(cnt < 20*50)
		{
			send_data.roll_or_x = 0;
			send_data.pitch_or_y = 0;
			//send_data.thr_z = 10; //m
			send_data.thr_z = 0; //m/s
			send_data.yaw = 0;
			printf("2");
		}
		else
		{
			cnt = 0;
		}
		printf("r p y v %f %f %f %f \n" ,send_data.roll_or_x,send_data.pitch_or_y,send_data.yaw,send_data.thr_z);

		App_Send_Data(0,MY_CTRL_CMD_SET,API_CTRL_REQUEST,(uint8_t*)&send_data,sizeof(send_data),NULL, 0,0);

		cnt++;
	}
}


void get_ctrl_test_mode5_and_mode6(bool &is_init)
{
	static float delta_t;
	static float init_lat;
	static float init_lon;
	if(!is_init)
	{
		delta_t = 0;
		init_lat = pose_msg.lati;
		init_lon = pose_msg.longti;
		is_init = true;
    	}
	else
	{
		api_ctrl_data_t send_data = {0};
		send_data.ctrl_flag = 0x80; // mode 5 or mode 6
		if(delta_t < 10*50)
		{

			float tgt_pos_x = 0; //m
			float tgt_pos_y = 0;

			float tgt_pos_lat = init_lat + tgt_pos_x/C_EARTH;
			float tgt_pos_lon = init_lon + tgt_pos_y/C_EARTH*cos(init_lat);

			float pos_x_offset = (tgt_pos_lat - pose_msg.lati) * C_EARTH;
			float pos_y_offset = (tgt_pos_lon - pose_msg.longti) * C_EARTH * cos(pose_msg.lati);

			float tgt_yaw_angle = atan2(pos_y_offset, pos_x_offset);

            send_data.roll_or_x = 0;
			send_data.pitch_or_y = 0;
			//send_data.thr_z = 2; //m
			send_data.thr_z = 1; //m/s
			send_data.yaw = 0;
			printf("up");
		}
		else if(delta_t < 20*50)
		{
			float tgt_pos_x = 0; //m
			float tgt_pos_y = 0;

			float tgt_pos_lat = init_lat + tgt_pos_x/C_EARTH;
			float tgt_pos_lon = init_lon + tgt_pos_y/C_EARTH*cos(init_lat);

			float pos_x_offset = (tgt_pos_lat - pose_msg.lati) * C_EARTH;
			float pos_y_offset = (tgt_pos_lon - pose_msg.longti) * C_EARTH * cos(pose_msg.lati);

			float tgt_yaw_angle = atan2(pos_y_offset, pos_x_offset);

            		send_data.roll_or_x = 0;
			send_data.pitch_or_y = 0;
			//send_data.thr_z = 2; //m
			send_data.thr_z = 0; //m/s
			send_data.yaw = 0;
			printf("stop");
		}
		else
		{
			delta_t = 0;
		}
		float my_vg_z = pose_msg.vgz ; //+ 0.05 * ((rand())%10);
		//cout << "vg_z:   " << pose_msg.vgz << endl;
		//cout << "my_vg_z:"<< my_vg_z << endl;
		//cout << "vel_z:    " <<  pose_msg.vgz <<endl;
		send_data.sensor_flag = 1;
		//send_data.pos_x = 0.0;
		//send_data.pos_y = 0.0;
		send_data.pos_z = 0;
		send_data.vel_x = 0;
		send_data.vel_y = 0;
		send_data.vel_z = -my_vg_z;	// add "-" for g_navi_data
		//printf("sent ctrl %d %f %f %f %f\n",send_data.ctrl_flag, send_data.roll_or_x, send_data.pitch_or_y, send_data.thr_z, send_data.yaw);
		App_Send_Data(0,MY_CTRL_CMD_SET,API_CTRL_REQUEST,(uint8_t*)&send_data,sizeof(send_data),NULL, 0,0);

		delta_t++;

	}

}

void get_ctrl_test_mode7_and_mode8(bool &is_init)
{

}

void get_ctrl_test_mode9_and_mode10(bool &is_init)
{

}

void get_ctrl_test_mode11_and_mode12(bool &is_init)
{
	static float delta_t;
	static float init_lat;
	static float init_lon;
	static float init_height;
	if(!is_init)
	{
		delta_t = 0;
		init_lat = pose_msg.lati;
		init_lon = pose_msg.longti;
		init_height = pose_msg.height;
		is_init = true;
    }
	else
	{
		api_ctrl_without_sensor_data_t send_data = {0};
		//send_data.ctrl_flag = 0x99; // mode 11 or mode 12
        	send_data.ctrl_flag = 0x98;
		if(delta_t < 10*50)
		{

			float tgt_pos_x = 5; //m
			float tgt_pos_y = 0;

			float tgt_pos_lat = init_lat + tgt_pos_x/C_EARTH;
			float tgt_pos_lon = init_lon + tgt_pos_y/C_EARTH*cos(init_lat);

			float pos_x_offset = (tgt_pos_lat - pose_msg.lati) * C_EARTH;
			float pos_y_offset = (tgt_pos_lon - pose_msg.longti) * C_EARTH * cos(pose_msg.lati);

			float tgt_yaw_angle = 0;//atan2(pos_y_offset, pos_x_offset);

            send_data.roll_or_x = 1;//pos_x_offset;
			send_data.pitch_or_y = 0;//pos_y_offset;
			send_data.thr_z = 2; //m
			send_data.yaw = tgt_yaw_angle;
			printf("1");
		}
		else if(delta_t < 20*50)
		{
			float tgt_pos_x = 0; //m
			float tgt_pos_y = 0;

			float tgt_pos_lat = init_lat + tgt_pos_x/C_EARTH;
			float tgt_pos_lon = init_lon + tgt_pos_y/C_EARTH*cos(init_lat);

			float pos_x_offset = (tgt_pos_lat - pose_msg.lati) * C_EARTH;
			float pos_y_offset = (tgt_pos_lon - pose_msg.longti) * C_EARTH * cos(pose_msg.lati);

			float tgt_yaw_angle = 0;//atan2(pos_y_offset, pos_x_offset);

            send_data.roll_or_x = 0;//pos_x_offset;
			send_data.pitch_or_y = 1;//pos_y_offset;
			send_data.thr_z = 2; //m
			send_data.yaw = tgt_yaw_angle;
			printf("2");
		}
		else
		{
			delta_t = 0;
		}
		printf("r p y v %f %f %f %f \n" ,send_data.roll_or_x,send_data.pitch_or_y,send_data.yaw,send_data.thr_z);

		App_Send_Data(0,MY_CTRL_CMD_SET,API_CTRL_REQUEST,(uint8_t*)&send_data,sizeof(send_data),NULL, 0,0);

		delta_t++;

	}

}

void get_ctrl_test_mode13_and_mode14(bool &is_init)
{
	static int cnt;
	if(!is_init)
	{
		cnt = 0;
		is_init= true;
	}
	else
	{
		api_ctrl_without_sensor_data_t send_data = {0};
        send_data.ctrl_flag = 0x28;
		if(cnt < 10*50)
		{
			send_data.roll_or_x = 0;
			send_data.pitch_or_y = 0;//10/180*C_PI;
			send_data.thr_z = 50;
			send_data.yaw = -200;
			printf("1");
		}
		else if(cnt < 20*50)
		{
			send_data.roll_or_x = 0;
			send_data.pitch_or_y = 0;
			send_data.thr_z = 50; //m/s
			send_data.yaw = 0;
			printf("2");
		}
		else
		{
			cnt = 0;
		}
		printf("r p y v %f %f %f %f \n" ,send_data.roll_or_x,send_data.pitch_or_y,send_data.yaw,send_data.thr_z);

		App_Send_Data(0,MY_CTRL_CMD_SET,API_CTRL_REQUEST,(uint8_t*)&send_data,sizeof(send_data),NULL, 0,0);
		cnt++;
	}
}

void get_ctrl_test_circle(bool &is_init)
{
	static float delta_t;
	static float init_lat;
	static float init_lon;
	static float init_h;
	if(!is_init)
	{
		delta_t = 0;
		init_lat = pose_msg.lati;
		init_lon = pose_msg.longti;
		init_h = pose_msg.height;
		is_init = true;

    }
	else
	{
		float tgt_pos_x = 5.0f*sin(delta_t/50.0f*30/180*C_PI);
		float tgt_pos_y = 5.0f*cos(delta_t/50.0f*30/180*C_PI);

		float tgt_pos_lat = init_lat + tgt_pos_x/C_EARTH;
		float tgt_pos_lon = init_lon + tgt_pos_y/C_EARTH*cos(init_lat);

		float pos_x_offset = (tgt_pos_lat - pose_msg.lati) * C_EARTH;
		float pos_y_offset = (tgt_pos_lon - pose_msg.longti) * C_EARTH * cos(pose_msg.lati);

		float tgt_yaw_angle = atan2(pos_y_offset, pos_x_offset);

		//api_ctrl_data_t send_data = {0};
		api_ctrl_without_sensor_data_t send_data = {0};
		send_data.ctrl_flag = 0x90 ;

		send_data.roll_or_x = pos_x_offset;
		send_data.pitch_or_y = pos_y_offset;
		send_data.thr_z = init_h;
		send_data.yaw = tgt_yaw_angle;

		printf("init_lati,init_longti %f,%f \n", init_lat,init_lon);
		printf("tgt_pos_x,tgt_pos_y %f,%f \n", tgt_pos_x,tgt_pos_y);
		printf("pose_msg.lati,pose_msg.longti %f,%f \n", pose_msg.lati,pose_msg.longti);

		printf("x %f y %f z %f yaw %f \n", pos_x_offset,pos_y_offset,init_h,tgt_yaw_angle);

		App_Send_Data(0,MY_CTRL_CMD_SET,API_CTRL_REQUEST,(uint8_t*)&send_data,sizeof(send_data),NULL, 0,0);

		delta_t++;

	}
}

void get_ctrl_test_line(bool &is_init)
{
	static float delta_t;
	static float init_lat;
	static float init_lon;
	static float init_h;
	if(!is_init)
	{
		delta_t = 0;
		init_lat = pose_msg.lati;
		init_lon = pose_msg.longti;
		init_h = pose_msg.height;
		is_init = true;
    	}
	else
	{
		float tgt_pos_x = 15; //m
		float tgt_pos_y = 0;

		float tgt_pos_lat = init_lat + tgt_pos_x/C_EARTH;
		float tgt_pos_lon = init_lon + tgt_pos_y/C_EARTH*cos(init_lat);

		float pos_x_offset = (tgt_pos_lat - pose_msg.lati) * C_EARTH;
		float pos_y_offset = (tgt_pos_lon - pose_msg.longti) * C_EARTH * cos(pose_msg.lati);

		float tgt_yaw_angle = atan2(pos_y_offset, pos_x_offset);

		api_ctrl_data_t send_data = {0};
		send_data.ctrl_flag = 0x98 ;

		send_data.roll_or_x = pos_x_offset;
		send_data.pitch_or_y = pos_y_offset;
		send_data.thr_z = init_h;
		send_data.yaw = tgt_yaw_angle;
		delta_t++;
		printf("init_lati,init_longti %f,%f \n", init_lat,init_lon);
		printf("tgt_pos_x,tgt_pos_y %f,%f \n", tgt_pos_x,tgt_pos_y);
		printf("pose_msg.lati,pose_msg.longti %f,%f \n", pose_msg.lati,pose_msg.longti);

		printf("x %f y %f z %f yaw %f \n", pos_x_offset,pos_y_offset,init_h,tgt_yaw_angle);



		send_data.sensor_flag = 0;
		//send_data.pos_x = 0.0;
		//send_data.pos_y = 0.0;
		send_data.pos_z = -5.0;
		send_data.vel_x = 0.0;
		send_data.vel_y = 0.0;
        send_data.vel_z = 0.0;
		//printf("sent ctrl %d %f %f %f %f\n",send_data.ctrl_flag, send_data.roll_or_x, send_data.pitch_or_y, send_data.thr_z, send_data.yaw);
        App_Send_Data(0,MY_CTRL_CMD_SET,API_CTRL_REQUEST,(uint8_t*)&send_data,sizeof(send_data),NULL, 0,0);
	}
}


void get_ctrl_test_vicon(bool &is_init)
{
	static float delta_t;
	static float init_lat;
	static float init_lon;
	static float init_height;
	if(!is_init)
	{
		delta_t = 0;
		init_lat = pose_msg.lati;
		init_lon = pose_msg.longti;
		init_height = pose_msg.height;
		is_init = true;
    	}
	else
	{
		api_ctrl_data_t send_data = {0};
		send_data.ctrl_flag = 0x5a; // mode 10
		if(delta_t < 10*50)
		{

            send_data.roll_or_x = 0;
			send_data.pitch_or_y = 0;
			//send_data.thr_z = 2; //m
			send_data.thr_z = 0; //m
			send_data.yaw = 0;
			printf("1");
		}
		else if(delta_t < 20*50)
		{

            send_data.roll_or_x = 0;
			send_data.pitch_or_y = 0;
			//send_data.thr_z = 2; //m
			send_data.thr_z = 1; //m
			send_data.yaw = 0;
			printf("2");
		}
		else
		{
			delta_t = 0;
		}
		float my_height = pose_msg.height-init_height;
		printf("height:   %f \n",pose_msg.height);
		printf("my height:%f \n",my_height);
		send_data.sensor_flag = 1;
		//send_data.pos_x = 0.0;
		//send_data.pos_y = 0.0;
		send_data.pos_z = my_height;
		send_data.vel_x = pose_msg.vgx;
		send_data.vel_y = pose_msg.vgy;
		send_data.vel_z = 0;	// add "-" for g_navi_data
		//printf("sent ctrl %d %f %f %f %f\n",send_data.ctrl_flag, send_data.roll_or_x, send_data.pitch_or_y, send_data.thr_z, send_data.yaw);
		App_Send_Data(0,MY_CTRL_CMD_SET,API_CTRL_REQUEST,(uint8_t*)&send_data,sizeof(send_data),NULL, 0,0);

		delta_t++;

	}

}


void test_all(bool &is_init)
{
	static int cnt;
	if(!is_init)
	{
		cnt = 0;
		is_init= true;
	}
	else
	{
		static bool init_flag = false;
		if(cnt < 50*5)
		{
			cmd_agency_data_t cmd;
			cmd.cmd_data = 4;
			cmd.cmd_sequence = uint8_t(random()%100 +1);
			App_Send_Data(2,MY_CTRL_CMD_SET, API_CMD_REQUEST,(uint8_t*)&cmd,sizeof(cmd),random_test_ack_cmd_callback, 500, 10);
		}
		if(cnt < 50*80)
		{
			basic_test_mode1(init_flag);
		}
		else if(cnt < 50*80+1)
		{
			init_flag = false;
		}
		else if(cnt < 50*80*2)
		{
			basic_test_mode2(init_flag);
		}
		else if(cnt < 50*80*2+1)
		{
			init_flag = false;
		}
		else if(cnt < 50*80*3)
		{
			basic_test_mode3(init_flag);
		}
		else if(cnt < 50*80*3+1)
		{
			init_flag = false;
		}
		else if(cnt < 50*80*4)
		{
			basic_test_mode4(init_flag);
		}
		else if(cnt < 50*80*4+1)
		{
			init_flag = false;
		}
		else if(cnt < 50*80*5)
		{
			basic_test_mode5(init_flag);
		}
		else if(cnt < 50*80*5+1)
		{
			init_flag = false;
		}
		else if(cnt < 50*80*5)
		{
			basic_test_mode6(init_flag);
		}
		else if(cnt < 50*80*5+1)
		{
			init_flag = false;
		}
		else if(cnt < 50*80*5)
		{
			basic_test_mode13(init_flag);
		}
		else if(cnt < 50*80*5+1)
		{
			init_flag = false;
		}
		else if(cnt < 50*80*5)
		{
			basic_test_mode14(init_flag);
		}
		else if(cnt < 50*80*5+1)
		{
			init_flag = false;
		}
		else if(cnt < 50*80*5)
		{
			basic_test_cmd(init_flag);
		}
		else if(cnt < 50*80*5+1)
		{
			init_flag = false;
		}
		else if(cnt < 50*80*5)
		{
			random_test_cmd(init_flag);
		}
		else if(cnt < 50*80*5+1)
		{
			init_flag = false;
		}
		else if(cnt < 50*80*5+50*10)
		{
			cmd_agency_data_t cmd;
			cmd.cmd_data = 4;
			cmd.cmd_sequence = uint8_t(random()%100 +1);
			App_Send_Data(2,MY_CTRL_CMD_SET, API_CMD_REQUEST,(uint8_t*)&cmd,sizeof(cmd),random_test_ack_cmd_callback, 500, 10);
		}
		else
		{
			cnt = 0;
		}		
	}
}

void test_activation_ack_cmd_callback(ProHeader *header)
{
	/*
		#define	ACTIVATION_SUCCESS		0x0000
		#define ERROR_LENGTH_OR_PARA		0x0001
		#define ERROR_ENCODE			0x0002
		#define UNACT_TRY_TO_ACT		0x0003
		#define DJI_APP_TIMEOUT			0x0004
		#define DJI_APP_UNCONNECT_NET		0x0005
		#define SERVER REFUSED			0x0006
	*/
	uint16_t ack_data;
	printf("Sdk_ack_cmd0_callback,sequence_number=%d,session_id=%d,data_len=%d\n", header->sequence_number, header->session_id, header->length - EXC_DATA_SIZE);
	memcpy((uint8_t *)&ack_data,(uint8_t *)&header->magic, (header->length - EXC_DATA_SIZE));

	if( is_sys_error(ack_data))
	{
		printf("[DEBUG] SDK_SYS_ERROR!!! \n");
	}
	else
	{
		char result[7][50]={{"ACTIVATION_SUCCESS"},{"ERROR_LENGTH_OR_PARA"},{"ERROR_ENCODE"},{"UNACT_TRY_TO_ACT"},{"DJI_APP_TIMEOUT"},{"DJI_APP_UNCONNECT_INTERNET"},{"SERVER REFUSED"}};
		printf("[ACTIVATION] Activation result: %s \n", *(result+ack_data));
	}
}

void test_activation(void)
{
	uint8_t bundle_id[] = "12345678901234567890123456789012";
	activation_data_t msg = {10,1,1,""};
	memcpy(msg.app_bundle_id, bundle_id, 32);
//	msg.app_id 		= 0;
//	msg.app_sdk_level 	= 1;
//	msg.app_ver		= 2;
//	msg.app_bundle_id[0]	= 4;
	App_Send_Data(2,MY_ACTIVATION_SET, API_USER_ACTIVATION,(uint8_t*)&msg,sizeof(msg),test_activation_ack_cmd_callback, 1000, 0);
	printf("[ACTIVATION] send acticition msg: %d %d %d %d \n", msg.app_id, msg.app_sdk_level, msg.app_ver ,msg.app_bundle_id[0]);
}

void test_version_query_ack_cmd_callback(ProHeader *header)
{
	version_query_data_t ack;
	printf("Sdk_ack_cmd0_callback,sequence_number=%d,session_id=%d,data_len=%d\n", header->sequence_number, header->session_id, header->length - EXC_DATA_SIZE);
	memcpy((uint8_t *)&ack,(uint8_t *)&header->magic, sizeof(uint16_t));
	// pay attention to memory holes
	memcpy((uint8_t *)&ack.version_crc,(uint8_t *)&header->magic+sizeof(uint16_t), (header->length - EXC_DATA_SIZE)-sizeof(uint16_t));

	printf("[ACTIVATION] Activation result:\n 	ack %#X\n 	version_crc %d\n 	version_name %s \n", ack.version_ack, ack.version_crc, ack.version_name);
}

void test_version_query(void)
{
	uint8_t msg = 1;
	App_Send_Data(2,MY_ACTIVATION_SET, API_VERSION_QUERY,(uint8_t*)&msg,sizeof(msg),test_version_query_ack_cmd_callback, 1000, 0);
	printf("[ACTIVATION] send version_query msg \n");
}
//----------------------------------------------------------
// ros_callback
//----------------------------------------------------------
static uint8_t cmd_send_flag = 1;

void cmd_callback_fun(uint16_t *ack)
{
	/*
	*	#define	REQ_TIME_OUT			0x0000
		#define REQ_REFUSE			0x0001
		#define CMD_RECIEVE			0x0002
		#define STATUS_CMD_EXECUTING		0x0003
		#define STATUS_CMD_EXE_FAIL		0x0004
		#define STATUS_CMD_EXE_SUCCESS		0x0005
	*/
	uint16_t ack_data = *ack;
	printf("[DEBUG] recv_ack %#x \n", ack_data);
	char result[6][50]={{"REQ_TIME_OUT"},{"REQ_REFUSE"},{"CMD_RECIEVE"},{"STATUS_CMD_EXECUTING"},{"STATUS_CMD_EXE_FAIL"},{"STATUS_CMD_EXE_SUCCESS"}};
	printf("random_test Cmd result: %s \n", *(result+ack_data));

	cmd_send_flag = 1;
} 
void ros_cmd_data_callback(const std_msgs::Float32::ConstPtr& msg)
{
	uint8_t send_data = (uint8_t)msg->data;
	printf("cmd %d\n", send_data);
	if( send_data > 21)
		return;
#if 0
	App_Send_Data(0,MY_CTRL_CMD_SET,API_CMD_REQUEST,(uint8_t*)&send_data,sizeof(send_data),NULL, 0,0);
#else
	if(cmd_send_flag)
	{
		App_Complex_Send_Cmd(send_data, cmd_callback_fun);
		cmd_send_flag = 0;
	}
	else
	{
		printf("[CMD] wating! \n");
	}
#endif
}


void ros_nav_open_close_callback(const std_msgs::Float32::ConstPtr& msg)
{
#if 0
	uint8_t ack = 1;
	nav_force_close_req_id.sequence_number = 0;
	nav_force_close_req_id.session_id      = 2;
	App_Send_Ack(nav_force_close_req_id, &ack, sizeof(ack));
#endif
	uint8_t send_data = (uint8_t)msg->data;
	printf("send open nav %d\n",send_data);
	App_Send_Data(2,MY_CTRL_CMD_SET,API_OPEN_SERIAL,(uint8_t*)&send_data,sizeof(send_data),sdk_ack_nav_open_close_callback, 1000,5);
}

void ros_ctrl_data_callback(const geometry_msgs::Quaternion::ConstPtr& msg)
{	
	api_ctrl_without_sensor_data_t send_data = {0};
	// data
//	send_data.send_yaw = (float)msg->z;
//	send_data.send_pitch = (float)msg->x;
//	send_data.send_roll = (float)msg->y;
//	send_data.send_thr = (float)(msg->w);
	printf("mode %f yaw %f pitch %f roll %f vel %f\n", ctrl_mode, (float)msg->z, (float)msg->x, (float)msg->y, (float)(msg->w));

	if(ctrl_mode == 1)
	{
	        send_data.ctrl_flag 	= 0x0a; // mode 1 or 2
		send_data.roll_or_x 	= msg->y;
		send_data.pitch_or_y 	= msg->x;
		send_data.thr_z 	= msg->w; //m/s
		send_data.yaw 		= msg->z;
	}
	else if (ctrl_mode == 2)
	{
		send_data.ctrl_flag 	= 0x4a; // mode 4 or mode 3
		send_data.roll_or_x 	= msg->y;
		send_data.pitch_or_y 	= msg->x;
		send_data.thr_z 	= msg->w; //m/s
		send_data.yaw 		= msg->z;
	}
	App_Send_Data(0,MY_CTRL_CMD_SET,API_CTRL_REQUEST,(uint8_t*)&send_data,sizeof(send_data),NULL, 0,0);
} 

void ros_ctrl_mode_callback(const std_msgs::Float32::ConstPtr& msg)
{
	ctrl_mode = (float)msg->data;
	printf("mode %f\n",ctrl_mode);
}

void ros_simple_task_callback(const std_msgs::Float32::ConstPtr& msg)
{
	//printf("simple task test %f\n",msg->data);
	simple_task_num = (int)msg->data;
}
/*
void ros_get_ctrl_data_callback(const serial_to_uav::api_ctrl_data::ConstPtr& msg)
{
/* ctrl msg frame */
/* horiz_mode    vert_mode   yaw_mode   level_frame   torsion_frame | crtl_data x 4*/
/*     2bit          2bit       1bit          2bit          1bit   	float  x 4 */
/* sensor msg fram*/
/*         pos_flag  vel_flag | sensor_data x 6 */
/* 000000     1bit	1bit  	      float x 6 */
/*
	api_ctrl_data_t send_data = {0};

	if(msg->horiz_mode == FMU_API_HORI_ATTI_TILT_ANG)
	{
		send_data.ctrl_flag |= 0x00;
	}
	else if(msg->horiz_mode == FMU_API_HORI_VEL)
	{
		send_data.ctrl_flag |= 0x40;
	}
	else if(msg->horiz_mode == FMU_API_HORI_POS)
	{
		send_data.ctrl_flag |= 0x80;
	}

	if(msg->vert_mode == FMU_API_VERT_VEL)
	{
		send_data.ctrl_flag |= 0x00;
	}
	else if(msg->vert_mode == FMU_API_VERT_POS)
	{
		send_data.ctrl_flag |= 0x10;
	}
	else if(msg->vert_mode == FMU_API_VERT_THRUST)
	{
		send_data.ctrl_flag |= 0x20;
	}
	

	if(msg->yaw_mode == FMU_API_YAW_ANG)
	{
		send_data.ctrl_flag |= 0x00;
	}
	else if(msg->yaw_mode == FMU_API_YAW_RATE)
	{
		send_data.ctrl_flag |= 0x08;
	}

	if(msg->level_frame == GROUND_LEVEL)
	{
		send_data.ctrl_flag |= 0x00;
	}
	else if(msg->level_frame == BODY_LEVEL)
	{
		send_data.ctrl_flag |= 0x02;
	}
	else if(msg->level_frame == REF_LEVEL)
	{
		send_data.ctrl_flag |= 0x04;
	}

	if(msg->torsion_frame == GROUND_TORSION)
	{
		send_data.ctrl_flag |= 0x00;
	}
	else if(msg->torsion_frame == BODY_TORSION)
	{
		send_data.ctrl_flag |= 0x01;
	}

	if(msg->pos_flag == 0)
	{
		send_data.sensor_flag |= 0x00;
	}
	else
	{
		send_data.sensor_flag |= 0x02;
	}

	if(msg->vel_flag == 0)
	{
		send_data.sensor_flag |= 0x00;
	}
	else
	{
		send_data.sensor_flag |= 0x01;
	}

	send_data.roll_or_x = msg->ctrl_data.x;
	send_data.pitch_or_y = msg->ctrl_data.y;
	send_data.thr_z = msg->ctrl_data.z;
	send_data.yaw = msg->ctrl_data.w;
	send_data.pos_z = msg->pos.z;
	send_data.vel_x = msg->vel.x;
	send_data.vel_y = msg->vel.y;
    	send_data.vel_z = msg->vel.z;
	printf("sent ctrl %d %f %f %f %f\n",send_data.ctrl_flag, send_data.roll_or_x, send_data.pitch_or_y, send_data.thr_z, send_data.yaw);
	App_Send_Data(0,MY_CTRL_CMD_SET,API_CTRL_REQUEST,(uint8_t*)&send_data,sizeof(send_data),NULL,0);
}
*/


//----------------------------------------------------------
// spin_function 50Hz
//----------------------------------------------------------
void spin_callback(const ros::TimerEvent& e)
{
	static unsigned int count = 0;
#if 0
	std_msgs::Float32 msg, msg1;
	msg.data  = count%100;
	msg1.data = count%6;
	battery_pub.publish(msg);
	flight_status_pub.publish(msg1);
#endif
	count++;
	if(count % 50 == 0)
	{
		std_msgs::Float32 msg;
		msg.data = (float)pose_msg.status;
		flight_status_pub.publish(msg);
		
		printf("[STD_MSGS] status %d\n",recv_sdk_std_msgs.status);
		printf("[STD_MSGS] pos %f %f %f %f \n",recv_sdk_std_msgs.pos.lati, recv_sdk_std_msgs.pos.longti, recv_sdk_std_msgs.pos.alti, recv_sdk_std_msgs.pos.height);
	}
	// test session ack
	if(nav_force_close_req_id.reserve == 1)
	{
		std_msgs::Float32 msg2;
		msg2.data = 4;
		nav_ctrl_status_pub.publish(msg2);
		nav_force_close_req_id.reserve = 0;

		uint16_t ack = 0x0001;
		printf("Ack close send %d !!!!!!!!!!! \n", ack);
		App_Send_Ack(nav_force_close_req_id, (uint8_t *)&ack, sizeof(ack));
	}

	if(simple_task_num > -1)
	{
		static bool init_flag;
		static ros::Time time = ros::Time::now();
		if(ros::Time::now().toSec()- time.toSec() < 1)
		{
			time = ros::Time::now();
		}
		else
		{
			init_flag = false;
			time = ros::Time::now();
		}
		//cout << "time "<< time.toSec() - ros::Time::now().toSec() << endl;
		switch(simple_task_num)
		{
			case 0:
			get_ctrl_test_mode1_and_mode2(init_flag);
			break;
			case 1:
			get_ctrl_test_mode3_and_mode4(init_flag);
			break;
			case 2:
			get_ctrl_test_mode5_and_mode6(init_flag);
			break;
			case 3:
			get_ctrl_test_mode7_and_mode8(init_flag);
			break;
			case 4:
			get_ctrl_test_mode9_and_mode10(init_flag);
			break;
			case 5:
			get_ctrl_test_mode11_and_mode12(init_flag);
			break;
			case 6:
			get_ctrl_test_mode13_and_mode14(init_flag);
			break;
			case 7:
			get_ctrl_test_line(init_flag);
			break;
			case 8:
			get_ctrl_test_vicon(init_flag);
			break;
			case 9:
			get_ctrl_test_circle(init_flag);
			break;
			case 10:
			basic_test_mode1(init_flag);
			break;
			case 11:
			basic_test_mode2(init_flag);
			break;
			case 12:
			basic_test_mode3(init_flag);
			break;		
			case 13:
			basic_test_mode4(init_flag);
			break;	
			case 14:
			basic_test_mode5(init_flag);
			break;	
			case 15:
			basic_test_mode6(init_flag);
			break;	
			case 16:
			basic_test_mode13(init_flag);
			break;	
			case 17:
			basic_test_mode14(init_flag);
			break;
			case 18:
			basic_test_cmd(init_flag);
			break;
			case 19:
			random_test_cmd(init_flag);
			break;
			case 20:
			test_all(init_flag);
			break;
			case 21:
			test_activation();
			simple_task_num = -1;
			break;
			case 22:
			test_version_query();
			simple_task_num = -1;
			break;
			
		}
	}
}
//----------------------------------------------------------
// test thread
//----------------------------------------------------------
/*
static void * CmdRecvThread(void * arg)
{ 
	static int cnt = 0;
	while(1)
	{
		if(is_send_cmd)
		{
			cnt++;
			printf("call CmdRecvThread %d\n", cnt);
			sleep(5);
			is_send_cmd = 0;
		}
		if(cnt == 5)
		{
			break;
		}
		
	}
	return NULL;
}

int CmdStartThread(void)
{
	int ret;
	pthread_t A_ARR0;
	ret = pthread_create(&A_ARR0, 0,CmdRecvThread,NULL);
	if(ret != 0)
	{
		return -1;
	}
	return 0;
}
*/
//----------------------------------------------------------
// main_function
//----------------------------------------------------------

int main (int argc, char** argv)
{
	printf("Test SDK Protocol demo\n");

	ros::init(argc, argv, "SDK_serial");
	ros::NodeHandle nh;

	cmd_data_sub 		= nh.subscribe("/sdk_request_cmd", 10, ros_cmd_data_callback);
	nav_open_close_sub      = nh.subscribe("/nav_open_close_request", 10, ros_nav_open_close_callback);
	ctrl_data_sub		= nh.subscribe("/sdk_request_ctrl", 10, ros_ctrl_data_callback);
	ctrl_mode_sub		= nh.subscribe("/sdk_request_ctrl_mode", 10, ros_ctrl_mode_callback);
	simple_task_sub		= nh.subscribe("/sdk_request_simple_task", 10, ros_simple_task_callback);

        battery_pub 		= nh.advertise<std_msgs::Float32>("/battery_status", 10);
	nav_ctrl_status_pub 	= nh.advertise<std_msgs::Float32>("/nav_open_close_status", 10);
	flight_status_pub 	= nh.advertise<std_msgs::Float32>("/flight_status", 10);
	sensor_data_pub         = nh.advertise<std_msgs::Float32>("/sensor_data", 10);
	rc_data_pub		= nh.advertise<std_msgs::Float32>("/rc_data", 10);
	test_fre_pub		= nh.advertise<std_msgs::Float32>("/test_fre", 10);

	simple_task_timer 	= nh.createTimer(ros::Duration(1.0/50.0), spin_callback);

	Pro_Hw_Setup("/dev/ttySAC0");
	Pro_Link_Setup();
	App_Recv_Set_Hook(App_Recv_Req_Data);
	App_Set_Table(set_handler_tab, cmd_handler_tab);

	CmdStartThread();
	
	ros::spin();

	return 0;
}
